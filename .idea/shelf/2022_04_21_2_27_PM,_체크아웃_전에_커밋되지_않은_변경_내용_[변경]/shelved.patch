Index: src/WindowHandler/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.WindowHandler;\n\nimport org.lwjgl.BufferUtils;\nimport org.lwjgl.glfw.GLFW;\nimport org.lwjgl.glfw.GLFWVidMode;\n\nimport java.nio.DoubleBuffer;\n\npublic class Window implements EventLister {\n    private int width, height;\n    private double max_fps, time, processedtime = 0;\n    private String windowtitle;\n    private long window;\n    private boolean keys[] = new boolean[GLFW.GLFW_KEY_LAST];\n    private boolean mousebuttons[] = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];\n\n    public Window(int width, int height, int fps, String windowtitle) {\n        this.width = width;\n        this.height = height;\n        this.max_fps = 1.0/fps;\n        this.windowtitle = windowtitle;\n    }\n    private Window() {\n\n    }\n    public void createwindow() {\n        if (!GLFW.glfwInit()) {\n            System.err.println(\"Error!!: GLFW.glfwinit() doesn't work.\");\n            return;\n        }\n        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);\n        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_FALSE);\n        window = GLFW.glfwCreateWindow(width, height, windowtitle, 0, 0);\n\n        if (window == 0) {\n            System.err.println(\"Error!!: window doesn't created.\");\n            return;\n        }\n        GLFWVidMode videomode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());\n        GLFW.glfwSetWindowPos(window, (videomode.width() - width) / 2, (videomode.height() - height) / 2);\n        GLFW.glfwShowWindow(window);\n\n        time = getTime();\n    }\n    public boolean closewindow() {\n        return GLFW.glfwWindowShouldClose(window);\n    }\n    public void update() {\n        eventsUpdater();\n        GLFW.glfwPollEvents();\n    }\n    public void swapBuffer() {\n        GLFW.glfwSwapBuffers(window);\n    }\n    public boolean isKeyDown(int keyCode) {\n        return GLFW.glfwGetKey(window, keyCode) == 1;\n    }\n    public boolean isMouseDown(int mouseButton) {\n        return GLFW.glfwGetMouseButton(window, mouseButton) == 1;\n    }\n    public boolean isKeyPressed(int keyCode) {\n        return isKeyDown(keyCode) && !keys[keyCode];\n    }\n    public boolean isMousePressed(int mouseButton) {\n        return isKeyDown(mouseButton) && !keys[mouseButton];\n    }\n    public boolean isKeyReleased(int keyCode) {\n        return !isKeyDown(keyCode) && keys[keyCode];\n    }\n    public boolean isMouseReleased(int mouseButton) {\n        return !isMouseDown(mouseButton) && mousebuttons[mouseButton];\n    }\n    public void eventsUpdater() {\n        for (int i = 0; i < GLFW.GLFW_KEY_LAST; i++)\n            keys[i] = isKeyDown(i);\n        for (int i = 0; i < GLFW.GLFW_MOUSE_BUTTON_LAST; i++)\n            mousebuttons[i] = isMouseDown(i);\n    }\n    public double getMouseX() {\n        DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);\n        GLFW.glfwGetCursorPos(window, buffer, null);\n        return buffer.get(0);\n    }\n    public double getMouseY() {\n        DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);\n        GLFW.glfwGetCursorPos(window, null, buffer);\n        return buffer.get(0);\n    }\n\n    public double getTime() {\n        return (double)System.nanoTime() / (double)1000000000;\n    }\n\n    public boolean isUpdating() {\n        double nexttime = getTime();\n        double passedtime = nexttime - time;\n        processedtime = passedtime;\n        time = nexttime;\n\n        while(processedtime > max_fps) {\n            processedtime -= max_fps;\n            return true;\n        }\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WindowHandler/Window.java b/src/WindowHandler/Window.java
--- a/src/WindowHandler/Window.java	(revision 309bcd98ad6ce501871c036ad0dfc03a99dc2ab5)
+++ b/src/WindowHandler/Window.java	(date 1650518705426)
@@ -62,7 +62,7 @@
         return isKeyDown(keyCode) && !keys[keyCode];
     }
     public boolean isMousePressed(int mouseButton) {
-        return isKeyDown(mouseButton) && !keys[mouseButton];
+        return isMouseDown(mouseButton) && !mousebuttons[mouseButton];
     }
     public boolean isKeyReleased(int keyCode) {
         return !isKeyDown(keyCode) && keys[keyCode];
@@ -88,7 +88,7 @@
     }
 
     public double getTime() {
-        return (double)System.nanoTime() / (double)1000000000;
+        return (double)System.nanoTime() / (double)100000000;
     }
 
     public boolean isUpdating() {
